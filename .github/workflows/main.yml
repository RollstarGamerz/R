name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable NLA
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          Set-Service -Name TermService -StartupType Automatic

          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing firewall rule to delete"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

          $logDir = "C:\RDP_Data"
          if (-not (Test-Path $logDir)) { New-Item -Path $logDir -ItemType Directory -Force | Out-Null }
          (Get-Date).ToString('u') + " - Configured core RDP settings" | Out-File -FilePath "$logDir\activity.log" -Append

      - name: Create RDP User with fixed password
        run: |
          $username = "RDP"
          $plainPassword = "rollstar"
          $securePass = ConvertTo-SecureString $plainPassword -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Write-Host "User $username already exists, updating password"
              try {
                  Get-LocalUser -Name $username | Set-LocalUser -Password $securePass
              } catch {
                  Write-Warning "Could not update password for existing user."
              }
          } else {
              New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
          }

          Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue

          $logDir = "C:\RDP_Data"
          if (-not (Test-Path $logDir)) { New-Item -Path $logDir -ItemType Directory -Force | Out-Null }
          "Username: $username" | Out-File -FilePath "$logDir\creds.txt" -Encoding utf8
          "Password: $plainPassword" | Out-File -FilePath "$logDir\creds.txt" -Append -Encoding utf8
          (Get-Date).ToString('u') + " - Created/updated user $username" | Out-File -FilePath "$logDir\activity.log" -Append

          echo "RDP_CREDS=User: $username | Password: $plainPassword" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

          Set-Service -Name Tailscale -StartupType Automatic -ErrorAction SilentlyContinue

          $logDir = "C:\RDP_Data"
          if (-not (Test-Path $logDir)) { New-Item -Path $logDir -ItemType Directory -Force | Out-Null }
          (Get-Date).ToString('u') + " - Tailscale installed" | Out-File -FilePath "$logDir\activity.log" -Append

      - name: Establish Tailscale Connection and capture real IP
        run: |
          $hostname = "gh-runner-$env:GITHUB_RUN_ID"
          if ($env:TAILSCALE_AUTH_KEY) {
              & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=$hostname
          } else {
              & "$env:ProgramFiles\Tailscale\tailscale.exe" up --hostname=$hostname || Write-Warning "No auth key available."
          }

          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
          if ($tsIP) {
              $tsIP = $tsIP.Trim()
              echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          }

          $realIP = (Get-NetIPAddress -AddressFamily IPv4 |
            Where-Object { $_.IPAddress -ne '127.0.0.1' -and $_.IPAddress -notlike '169.*' -and $_.InterfaceOperationalStatus -eq 'Up' } |
            Select-Object -First 1).IPAddress

          if ($realIP) { echo "REAL_RDP_IP=$realIP" >> $env:GITHUB_ENV }

          $logDir = "C:\RDP_Data"
          "TailscaleIP: $tsIP" | Out-File -FilePath "$logDir\ips.txt" -Append -Encoding utf8
          "RealIP: $realIP" | Out-File -FilePath "$logDir\ips.txt" -Append -Encoding utf8
          (Get-Date).ToString('u') + " - Captured IPs" | Out-File -FilePath "$logDir\activity.log" -Append

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Real IP: $env:REAL_RDP_IP"

          $target = if ($env:TAILSCALE_IP) { $env:TAILSCALE_IP } elseif ($env:REAL_RDP_IP) { $env:REAL_RDP_IP } else { $null }
          if (-not $target) { Write-Error "No IP available for RDP test"; exit 1 }

          $testResult = Test-NetConnection -ComputerName $target -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) { Write-Error "RDP test failed"; exit 1 }

          Write-Host "TCP connectivity to $target:3389 successful!"
          (Get-Date).ToString('u') + " - Verified RDP connectivity" | Out-File -FilePath "C:\RDP_Data\activity.log" -Append

      - name: Setup Persistence Helpers
        run: |
          $logDir = "C:\RDP_Data"
          if (-not (Test-Path $logDir)) { New-Item -Path $logDir -ItemType Directory -Force | Out-Null }

          $startupScript = "$logDir\startup-ensure.ps1"
          $scriptContent = @'
try {
    Set-Service -Name TermService -StartupType Automatic
    Start-Service -Name TermService -ErrorAction SilentlyContinue

    netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
    netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null

    if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe") {
        & "$env:ProgramFiles\Tailscale\tailscale.exe" up --hostname=$(hostname) 2>$null | Out-Null
    }

    (Get-Date).ToString('u') + " - startup-ensure executed" | Out-File -FilePath "C:\RDP_Data\activity.log" -Append
} catch {
    (Get-Date).ToString('u') + " - startup-ensure failed: $_" | Out-File -FilePath "C:\RDP_Data\activity.log" -Append
}
'@

          $scriptContent | Out-File -FilePath $startupScript -Encoding utf8 -Force

          $action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File `"$startupScript`""
          $trigger = New-ScheduledTaskTrigger -AtStartup
          $principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -RunLevel Highest
          Register-ScheduledTask -TaskName "RDP_EnsureStartup" -Action $action -Trigger $trigger -Principal $principal -Force

          (Get-Date).ToString('u') + " - Registered scheduled task" | Out-File -FilePath "$logDir\activity.log" -Append

      - name: Maintain Connection
        run: |
          $logDir = "C:\RDP_Data"
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Tailscale: $env:TAILSCALE_IP"
          Write-Host "Real IP: $env:REAL_RDP_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: rollstar"
          Write-Host "==================`n"

          while ($true) {
              (Get-Date).ToString('u') + " - RDP Active" | Out-File -FilePath "$logDir\activity.log" -Append
              Start-Sleep -Seconds 300
          }
